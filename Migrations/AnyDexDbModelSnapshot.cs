// <auto-generated />
using System;
using AnyDexDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnyDexDB.Migrations
{
    [DbContext(typeof(AnyDexDb))]
    partial class AnyDexDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8_general_ci")
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8");

            modelBuilder.Entity("AnyDexDB.Tables.AccountAction", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "fk_AccountAction_User1_idx");

                    b.ToTable("accountaction", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.Bookmark", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<ulong>("ResourceId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("resource_id");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ResourceId" }, "fk_Bookmark_Resource1_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_Bookmark_User1_idx");

                    b.ToTable("bookmark", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.Category", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique();

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.CategoryRating", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("CategoryId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("category_id");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("rating");

                    b.Property<ulong>("ResourceId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("resource_id");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "fk_CategoryRating_Category1_idx");

                    b.HasIndex(new[] { "ResourceId" }, "fk_CategoryRating_Resource1");

                    b.HasIndex(new[] { "UserId" }, "fk_CategoryRating_User1_idx");

                    b.ToTable("categoryrating", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.LearningPath", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "fk_LearningPath_User1_idx");

                    b.ToTable("learningpath", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.LearningStep", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<ulong>("LearningPathId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("learning_path_id");

                    b.Property<ulong>("ResourceId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("resource_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LearningPathId" }, "fk_LearningStep_LearningPath1_idx");

                    b.HasIndex(new[] { "ResourceId" }, "fk_LearningStep_Resource1_idx");

                    b.ToTable("learningstep", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.Material", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Length")
                        .HasColumnType("int")
                        .HasColumnName("length");

                    b.Property<string>("Publisher")
                        .HasColumnType("text")
                        .HasColumnName("publisher");

                    b.Property<ulong>("ResourceId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("resource_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ResourceId" }, "fk_Material_Resource1_idx");

                    b.ToTable("material", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.MaterialLink", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<ulong>("MaterialId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("material_id");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("release_date");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MaterialId" }, "fk_MaterialLink_Material1_idx");

                    b.ToTable("materiallink", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.Notification", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("link");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "fk_Notification_user1_idx");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.Progress", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<ulong>("Private")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasColumnName("private")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("ResourceId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("resource_id");

                    b.Property<DateTime?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<sbyte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.Property<uint>("Value")
                        .HasColumnType("int unsigned")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ResourceId" }, "fk_Progress_Resource1_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_Progress_User1_idx");

                    b.ToTable("progress", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.Quiz", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("CreatorId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("creator_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<ulong>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_public")
                        .HasDefaultValueSql("b'1'");

                    b.Property<DateTime>("ReleaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("release_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatorId" }, "fk_Quiz_User1_idx");

                    b.ToTable("quiz", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.QuizAnswer", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<ulong>("IsRight")
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_right");

                    b.Property<ulong>("QuizQuestionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("quiz_question_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "QuizQuestionId" }, "fk_QuizAnswer_QuizQuestion1_idx");

                    b.ToTable("quizanswer", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.QuizQuestion", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Hint")
                        .HasColumnType("text")
                        .HasColumnName("hint");

                    b.Property<ulong>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasColumnName("is_disabled")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.Property<ulong>("QuizId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("quiz_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "QuizId" }, "fk_QuizQuestion_Quiz1_idx");

                    b.ToTable("quizquestion", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.QuizRating", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("QuizId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("quiz_id");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("rating");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "QuizId" }, "fk_Rating_copy1_Quiz1_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_rating_user1_idx");

                    b.ToTable("quizrating", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.QuizResult", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<ulong>("QuizId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("quiz_id");

                    b.Property<byte>("Score")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("score");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "QuizId" }, "fk_QuizResult_Quiz1_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_QuizResult_User1_idx");

                    b.ToTable("quizresult", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.Rating", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<byte>("Rating1")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("rating");

                    b.Property<ulong>("ResourceId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("resource_id");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ResourceId" }, "fk_rating_resource1_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_rating_user1_idx")
                        .HasDatabaseName("fk_rating_user1_idx1");

                    b.ToTable("rating", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.Resource", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("creator");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("release_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("resource", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.ResourceQuiz", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("QuizId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("quiz_id");

                    b.Property<ulong>("ResourceId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("resource_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "QuizId" }, "fk_ResourceQuiz_Quiz1_idx");

                    b.HasIndex(new[] { "ResourceId" }, "fk_ResourceQuiz_Resource1_idx");

                    b.ToTable("resourcequiz", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.ResourceRelation", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("RelatedResourceId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("related_resource_id");

                    b.Property<ulong>("ResourceId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("resource_id");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ResourceId" }, "fk_ResourceRelation_Resource1_idx");

                    b.HasIndex(new[] { "RelatedResourceId" }, "fk_ResourceRelation_Resource2_idx");

                    b.ToTable("resourcerelation", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.User", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("password_hash");

                    b.Property<int>("Tag")
                        .HasMaxLength(4)
                        .HasColumnType("int")
                        .HasColumnName("tag");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("AnyDexDB.Tables.AccountAction", b =>
                {
                    b.HasOne("AnyDexDB.Tables.User", "User")
                        .WithMany("Accountactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_AccountAction_User1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnyDexDB.Tables.Bookmark", b =>
                {
                    b.HasOne("AnyDexDB.Tables.Resource", "Resource")
                        .WithMany("Bookmarks")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("fk_Bookmark_Resource1");

                    b.HasOne("AnyDexDB.Tables.User", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_Bookmark_User1");

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnyDexDB.Tables.CategoryRating", b =>
                {
                    b.HasOne("AnyDexDB.Tables.Category", "Category")
                        .WithMany("CategoryRatings")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("fk_CategoryRating_Category1");

                    b.HasOne("AnyDexDB.Tables.Resource", "Resource")
                        .WithMany("Categoryratings")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("fk_CategoryRating_Resource1");

                    b.HasOne("AnyDexDB.Tables.User", "User")
                        .WithMany("Categoryratings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_CategoryRating_User1");

                    b.Navigation("Category");

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnyDexDB.Tables.LearningPath", b =>
                {
                    b.HasOne("AnyDexDB.Tables.User", "User")
                        .WithMany("Learningpaths")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_LearningPath_User1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnyDexDB.Tables.LearningStep", b =>
                {
                    b.HasOne("AnyDexDB.Tables.LearningPath", "LearningPath")
                        .WithMany("LearningSteps")
                        .HasForeignKey("LearningPathId")
                        .IsRequired()
                        .HasConstraintName("fk_LearningStep_LearningPath1");

                    b.HasOne("AnyDexDB.Tables.Resource", "Resource")
                        .WithMany("Learningsteps")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("fk_LearningStep_Resource1");

                    b.Navigation("LearningPath");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("AnyDexDB.Tables.Material", b =>
                {
                    b.HasOne("AnyDexDB.Tables.Resource", "Resource")
                        .WithMany("Materials")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("fk_Material_Resource1");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("AnyDexDB.Tables.MaterialLink", b =>
                {
                    b.HasOne("AnyDexDB.Tables.Material", "Material")
                        .WithMany("MaterialLinks")
                        .HasForeignKey("MaterialId")
                        .IsRequired()
                        .HasConstraintName("fk_MaterialLink_Material1");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("AnyDexDB.Tables.Notification", b =>
                {
                    b.HasOne("AnyDexDB.Tables.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_Notification_user1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnyDexDB.Tables.Progress", b =>
                {
                    b.HasOne("AnyDexDB.Tables.Resource", "Resource")
                        .WithMany("Progresses")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("fk_Progress_Resource1");

                    b.HasOne("AnyDexDB.Tables.User", "User")
                        .WithMany("Progresses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_Progress_User1");

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnyDexDB.Tables.Quiz", b =>
                {
                    b.HasOne("AnyDexDB.Tables.User", "Creator")
                        .WithMany("Quizzes")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("fk_Quiz_User1");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("AnyDexDB.Tables.QuizAnswer", b =>
                {
                    b.HasOne("AnyDexDB.Tables.QuizQuestion", "QuizQuestion")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("QuizQuestionId")
                        .IsRequired()
                        .HasConstraintName("fk_QuizAnswer_QuizQuestion1");

                    b.Navigation("QuizQuestion");
                });

            modelBuilder.Entity("AnyDexDB.Tables.QuizQuestion", b =>
                {
                    b.HasOne("AnyDexDB.Tables.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .IsRequired()
                        .HasConstraintName("fk_QuizQuestion_Quiz1");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("AnyDexDB.Tables.QuizRating", b =>
                {
                    b.HasOne("AnyDexDB.Tables.Quiz", "Quiz")
                        .WithMany("QuizRatings")
                        .HasForeignKey("QuizId")
                        .IsRequired()
                        .HasConstraintName("fk_Rating_copy1_Quiz1");

                    b.HasOne("AnyDexDB.Tables.User", "User")
                        .WithMany("Quizratings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_rating_user10");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnyDexDB.Tables.QuizResult", b =>
                {
                    b.HasOne("AnyDexDB.Tables.Quiz", "Quiz")
                        .WithMany("QuizResults")
                        .HasForeignKey("QuizId")
                        .IsRequired()
                        .HasConstraintName("fk_QuizResult_Quiz1");

                    b.HasOne("AnyDexDB.Tables.User", "User")
                        .WithMany("Quizresults")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_QuizResult_User1");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnyDexDB.Tables.Rating", b =>
                {
                    b.HasOne("AnyDexDB.Tables.Resource", "Resource")
                        .WithMany("Ratings")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("fk_rating_resource1");

                    b.HasOne("AnyDexDB.Tables.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_rating_user1");

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnyDexDB.Tables.ResourceQuiz", b =>
                {
                    b.HasOne("AnyDexDB.Tables.Quiz", "Quiz")
                        .WithMany("ResourceQuizzes")
                        .HasForeignKey("QuizId")
                        .IsRequired()
                        .HasConstraintName("fk_ResourceQuiz_Quiz1");

                    b.HasOne("AnyDexDB.Tables.Resource", "Resource")
                        .WithMany("Resourcequizzes")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("fk_ResourceQuiz_Resource1");

                    b.Navigation("Quiz");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("AnyDexDB.Tables.ResourceRelation", b =>
                {
                    b.HasOne("AnyDexDB.Tables.Resource", "RelatedResource")
                        .WithMany("RelatedResources")
                        .HasForeignKey("RelatedResourceId")
                        .IsRequired()
                        .HasConstraintName("fk_ResourceRelation_Resource2");

                    b.HasOne("AnyDexDB.Tables.Resource", "Resource")
                        .WithMany("RelationResources")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("fk_ResourceRelation_Resource1");

                    b.Navigation("RelatedResource");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("AnyDexDB.Tables.Category", b =>
                {
                    b.Navigation("CategoryRatings");
                });

            modelBuilder.Entity("AnyDexDB.Tables.LearningPath", b =>
                {
                    b.Navigation("LearningSteps");
                });

            modelBuilder.Entity("AnyDexDB.Tables.Material", b =>
                {
                    b.Navigation("MaterialLinks");
                });

            modelBuilder.Entity("AnyDexDB.Tables.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("QuizRatings");

                    b.Navigation("QuizResults");

                    b.Navigation("ResourceQuizzes");
                });

            modelBuilder.Entity("AnyDexDB.Tables.QuizQuestion", b =>
                {
                    b.Navigation("QuizAnswers");
                });

            modelBuilder.Entity("AnyDexDB.Tables.Resource", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Categoryratings");

                    b.Navigation("Learningsteps");

                    b.Navigation("Materials");

                    b.Navigation("Progresses");

                    b.Navigation("Ratings");

                    b.Navigation("RelatedResources");

                    b.Navigation("RelationResources");

                    b.Navigation("Resourcequizzes");
                });

            modelBuilder.Entity("AnyDexDB.Tables.User", b =>
                {
                    b.Navigation("Accountactions");

                    b.Navigation("Bookmarks");

                    b.Navigation("Categoryratings");

                    b.Navigation("Learningpaths");

                    b.Navigation("Notifications");

                    b.Navigation("Progresses");

                    b.Navigation("Quizratings");

                    b.Navigation("Quizresults");

                    b.Navigation("Quizzes");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
